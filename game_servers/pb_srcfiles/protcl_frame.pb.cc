// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protcl_frame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protcl_frame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* server_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  server_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* req_E_FRAME_MSG_REGISTER_SERVER_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  req_E_FRAME_MSG_REGISTER_SERVER_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* rep_E_FRAME_MSG_REGISTER_SERVER_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rep_E_FRAME_MSG_REGISTER_SERVER_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* req_E_FRAME_MSG_NEW_SERVER_BOOTUP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  req_E_FRAME_MSG_NEW_SERVER_BOOTUP_reflection_ = NULL;
const ::google::protobuf::Descriptor* rep_E_FRAME_MSG_NEW_SERVER_BOOTUP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rep_E_FRAME_MSG_NEW_SERVER_BOOTUP_reflection_ = NULL;
const ::google::protobuf::Descriptor* req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* req_E_FRAME_MSG_ROOT_TO_XS_START_RUN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  req_E_FRAME_MSG_ROOT_TO_XS_START_RUN_reflection_ = NULL;
const ::google::protobuf::Descriptor* rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN_reflection_ = NULL;
const ::google::protobuf::Descriptor* req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_reflection_ = NULL;
const ::google::protobuf::Descriptor* rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protcl_5fframe_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protcl_5fframe_2eproto() {
  protobuf_AddDesc_protcl_5fframe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protcl_frame.proto");
  GOOGLE_CHECK(file != NULL);
  server_info_t_descriptor_ = file->message_type(0);
  static const int server_info_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info_t, node_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info_t, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info_t, server_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info_t, zone_id_),
  };
  server_info_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      server_info_t_descriptor_,
      server_info_t::default_instance_,
      server_info_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(server_info_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info_t, _is_default_instance_));
  req_E_FRAME_MSG_REGISTER_SERVER_INFO_descriptor_ = file->message_type(1);
  static const int req_E_FRAME_MSG_REGISTER_SERVER_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_REGISTER_SERVER_INFO, server_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_REGISTER_SERVER_INFO, zone_id_),
  };
  req_E_FRAME_MSG_REGISTER_SERVER_INFO_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      req_E_FRAME_MSG_REGISTER_SERVER_INFO_descriptor_,
      req_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance_,
      req_E_FRAME_MSG_REGISTER_SERVER_INFO_offsets_,
      -1,
      -1,
      -1,
      sizeof(req_E_FRAME_MSG_REGISTER_SERVER_INFO),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_REGISTER_SERVER_INFO, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_REGISTER_SERVER_INFO, _is_default_instance_));
  rep_E_FRAME_MSG_REGISTER_SERVER_INFO_descriptor_ = file->message_type(2);
  static const int rep_E_FRAME_MSG_REGISTER_SERVER_INFO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_REGISTER_SERVER_INFO, isok_),
  };
  rep_E_FRAME_MSG_REGISTER_SERVER_INFO_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rep_E_FRAME_MSG_REGISTER_SERVER_INFO_descriptor_,
      rep_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance_,
      rep_E_FRAME_MSG_REGISTER_SERVER_INFO_offsets_,
      -1,
      -1,
      -1,
      sizeof(rep_E_FRAME_MSG_REGISTER_SERVER_INFO),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_REGISTER_SERVER_INFO, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_REGISTER_SERVER_INFO, _is_default_instance_));
  req_E_FRAME_MSG_NEW_SERVER_BOOTUP_descriptor_ = file->message_type(3);
  static const int req_E_FRAME_MSG_NEW_SERVER_BOOTUP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_NEW_SERVER_BOOTUP, node_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_NEW_SERVER_BOOTUP, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_NEW_SERVER_BOOTUP, node_index_),
  };
  req_E_FRAME_MSG_NEW_SERVER_BOOTUP_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      req_E_FRAME_MSG_NEW_SERVER_BOOTUP_descriptor_,
      req_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance_,
      req_E_FRAME_MSG_NEW_SERVER_BOOTUP_offsets_,
      -1,
      -1,
      -1,
      sizeof(req_E_FRAME_MSG_NEW_SERVER_BOOTUP),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_NEW_SERVER_BOOTUP, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_NEW_SERVER_BOOTUP, _is_default_instance_));
  rep_E_FRAME_MSG_NEW_SERVER_BOOTUP_descriptor_ = file->message_type(4);
  static const int rep_E_FRAME_MSG_NEW_SERVER_BOOTUP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_NEW_SERVER_BOOTUP, isok_),
  };
  rep_E_FRAME_MSG_NEW_SERVER_BOOTUP_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rep_E_FRAME_MSG_NEW_SERVER_BOOTUP_descriptor_,
      rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance_,
      rep_E_FRAME_MSG_NEW_SERVER_BOOTUP_offsets_,
      -1,
      -1,
      -1,
      sizeof(rep_E_FRAME_MSG_NEW_SERVER_BOOTUP),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_NEW_SERVER_BOOTUP, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_NEW_SERVER_BOOTUP, _is_default_instance_));
  req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_descriptor_ = file->message_type(5);
  static const int req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST, node_type_),
  };
  req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_descriptor_,
      req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance_,
      req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_offsets_,
      -1,
      -1,
      -1,
      sizeof(req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST, _is_default_instance_));
  rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_descriptor_ = file->message_type(6);
  static const int rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST, server_list_),
  };
  rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_descriptor_,
      rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance_,
      rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_offsets_,
      -1,
      -1,
      -1,
      sizeof(rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST, _is_default_instance_));
  req_E_FRAME_MSG_ROOT_TO_XS_START_RUN_descriptor_ = file->message_type(7);
  static const int req_E_FRAME_MSG_ROOT_TO_XS_START_RUN_offsets_[1] = {
  };
  req_E_FRAME_MSG_ROOT_TO_XS_START_RUN_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      req_E_FRAME_MSG_ROOT_TO_XS_START_RUN_descriptor_,
      req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance_,
      req_E_FRAME_MSG_ROOT_TO_XS_START_RUN_offsets_,
      -1,
      -1,
      -1,
      sizeof(req_E_FRAME_MSG_ROOT_TO_XS_START_RUN),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_ROOT_TO_XS_START_RUN, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_ROOT_TO_XS_START_RUN, _is_default_instance_));
  rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN_descriptor_ = file->message_type(8);
  static const int rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN, isok_),
  };
  rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN_descriptor_,
      rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance_,
      rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN_offsets_,
      -1,
      -1,
      -1,
      sizeof(rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN, _is_default_instance_));
  req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_descriptor_ = file->message_type(9);
  static const int req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS, node_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS, node_index_),
  };
  req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_descriptor_,
      req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance_,
      req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_offsets_,
      -1,
      -1,
      -1,
      sizeof(req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS, _is_default_instance_));
  rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_descriptor_ = file->message_type(10);
  static const int rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS, isok_),
  };
  rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_descriptor_,
      rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance_,
      rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_offsets_,
      -1,
      -1,
      -1,
      sizeof(rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protcl_5fframe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      server_info_t_descriptor_, &server_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      req_E_FRAME_MSG_REGISTER_SERVER_INFO_descriptor_, &req_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rep_E_FRAME_MSG_REGISTER_SERVER_INFO_descriptor_, &rep_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      req_E_FRAME_MSG_NEW_SERVER_BOOTUP_descriptor_, &req_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rep_E_FRAME_MSG_NEW_SERVER_BOOTUP_descriptor_, &rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_descriptor_, &req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_descriptor_, &rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      req_E_FRAME_MSG_ROOT_TO_XS_START_RUN_descriptor_, &req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN_descriptor_, &rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_descriptor_, &req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_descriptor_, &rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protcl_5fframe_2eproto() {
  delete server_info_t::default_instance_;
  delete server_info_t_reflection_;
  delete req_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance_;
  delete req_E_FRAME_MSG_REGISTER_SERVER_INFO_reflection_;
  delete rep_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance_;
  delete rep_E_FRAME_MSG_REGISTER_SERVER_INFO_reflection_;
  delete req_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance_;
  delete req_E_FRAME_MSG_NEW_SERVER_BOOTUP_reflection_;
  delete rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance_;
  delete rep_E_FRAME_MSG_NEW_SERVER_BOOTUP_reflection_;
  delete req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance_;
  delete req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_reflection_;
  delete rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance_;
  delete rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_reflection_;
  delete req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance_;
  delete req_E_FRAME_MSG_ROOT_TO_XS_START_RUN_reflection_;
  delete rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance_;
  delete rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN_reflection_;
  delete req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance_;
  delete req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_reflection_;
  delete rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance_;
  delete rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_reflection_;
}

void protobuf_AddDesc_protcl_5fframe_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protcl_5fframe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022protcl_frame.proto\022\006protos\"^\n\rserver_i"
    "nfo_t\022\021\n\tnode_type\030\001 \001(\005\022\023\n\013server_type\030"
    "\002 \001(\005\022\024\n\014server_index\030\003 \001(\005\022\017\n\007zone_id\030\004"
    " \001(\005\"c\n$req_E_FRAME_MSG_REGISTER_SERVER_"
    "INFO\022*\n\013server_node\030\001 \001(\0132\025.protos.serve"
    "r_info_t\022\017\n\007zone_id\030\002 \001(\005\"4\n$rep_E_FRAME"
    "_MSG_REGISTER_SERVER_INFO\022\014\n\004isok\030\001 \001(\005\""
    "_\n!req_E_FRAME_MSG_NEW_SERVER_BOOTUP\022\021\n\t"
    "node_type\030\001 \001(\005\022\023\n\013server_type\030\002 \001(\005\022\022\n\n"
    "node_index\030\003 \001(\005\"1\n!rep_E_FRAME_MSG_NEW_"
    "SERVER_BOOTUP\022\014\n\004isok\030\001 \001(\005\";\n&req_E_FRA"
    "ME_MSG_QUERY_SERVER_NODE_LIST\022\021\n\tnode_ty"
    "pe\030\001 \001(\005\"b\n&rep_E_FRAME_MSG_QUERY_SERVER"
    "_NODE_LIST\022\014\n\004isok\030\001 \001(\005\022*\n\013server_list\030"
    "\002 \003(\0132\025.protos.server_info_t\"&\n$req_E_FR"
    "AME_MSG_ROOT_TO_XS_START_RUN\"4\n$rep_E_FR"
    "AME_MSG_ROOT_TO_XS_START_RUN\022\014\n\004isok\030\001 \001"
    "(\005\"O\n&req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OT"
    "HERS\022\021\n\tnode_type\030\001 \001(\005\022\022\n\nnode_index\030\002 "
    "\001(\005\"6\n&rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_O"
    "THERS\022\014\n\004isok\030\001 \001(\005b\006proto3", 827);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protcl_frame.proto", &protobuf_RegisterTypes);
  server_info_t::default_instance_ = new server_info_t();
  req_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance_ = new req_E_FRAME_MSG_REGISTER_SERVER_INFO();
  rep_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance_ = new rep_E_FRAME_MSG_REGISTER_SERVER_INFO();
  req_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance_ = new req_E_FRAME_MSG_NEW_SERVER_BOOTUP();
  rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance_ = new rep_E_FRAME_MSG_NEW_SERVER_BOOTUP();
  req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance_ = new req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST();
  rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance_ = new rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST();
  req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance_ = new req_E_FRAME_MSG_ROOT_TO_XS_START_RUN();
  rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance_ = new rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN();
  req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance_ = new req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS();
  rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance_ = new rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS();
  server_info_t::default_instance_->InitAsDefaultInstance();
  req_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance_->InitAsDefaultInstance();
  rep_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance_->InitAsDefaultInstance();
  req_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance_->InitAsDefaultInstance();
  rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance_->InitAsDefaultInstance();
  req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance_->InitAsDefaultInstance();
  rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance_->InitAsDefaultInstance();
  req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance_->InitAsDefaultInstance();
  rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance_->InitAsDefaultInstance();
  req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance_->InitAsDefaultInstance();
  rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protcl_5fframe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protcl_5fframe_2eproto {
  StaticDescriptorInitializer_protcl_5fframe_2eproto() {
    protobuf_AddDesc_protcl_5fframe_2eproto();
  }
} static_descriptor_initializer_protcl_5fframe_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int server_info_t::kNodeTypeFieldNumber;
const int server_info_t::kServerTypeFieldNumber;
const int server_info_t::kServerIndexFieldNumber;
const int server_info_t::kZoneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

server_info_t::server_info_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.server_info_t)
}

void server_info_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

server_info_t::server_info_t(const server_info_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.server_info_t)
}

void server_info_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_type_ = 0;
  server_type_ = 0;
  server_index_ = 0;
  zone_id_ = 0;
}

server_info_t::~server_info_t() {
  // @@protoc_insertion_point(destructor:protos.server_info_t)
  SharedDtor();
}

void server_info_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void server_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* server_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_info_t_descriptor_;
}

const server_info_t& server_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protcl_5fframe_2eproto();
  return *default_instance_;
}

server_info_t* server_info_t::default_instance_ = NULL;

server_info_t* server_info_t::New(::google::protobuf::Arena* arena) const {
  server_info_t* n = new server_info_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void server_info_t::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.server_info_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(server_info_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<server_info_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_type_, zone_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool server_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.server_info_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_type;
        break;
      }

      // optional int32 server_type = 2;
      case 2: {
        if (tag == 16) {
         parse_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_server_index;
        break;
      }

      // optional int32 server_index = 3;
      case 3: {
        if (tag == 24) {
         parse_server_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zone_id;
        break;
      }

      // optional int32 zone_id = 4;
      case 4: {
        if (tag == 32) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zone_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.server_info_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.server_info_t)
  return false;
#undef DO_
}

void server_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.server_info_t)
  // optional int32 node_type = 1;
  if (this->node_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_type(), output);
  }

  // optional int32 server_type = 2;
  if (this->server_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_type(), output);
  }

  // optional int32 server_index = 3;
  if (this->server_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_index(), output);
  }

  // optional int32 zone_id = 4;
  if (this->zone_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->zone_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:protos.server_info_t)
}

::google::protobuf::uint8* server_info_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.server_info_t)
  // optional int32 node_type = 1;
  if (this->node_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_type(), target);
  }

  // optional int32 server_type = 2;
  if (this->server_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_type(), target);
  }

  // optional int32 server_index = 3;
  if (this->server_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_index(), target);
  }

  // optional int32 zone_id = 4;
  if (this->zone_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->zone_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protos.server_info_t)
  return target;
}

int server_info_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protos.server_info_t)
  int total_size = 0;

  // optional int32 node_type = 1;
  if (this->node_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_type());
  }

  // optional int32 server_type = 2;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_type());
  }

  // optional int32 server_index = 3;
  if (this->server_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_index());
  }

  // optional int32 zone_id = 4;
  if (this->zone_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zone_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void server_info_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.server_info_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const server_info_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const server_info_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.server_info_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.server_info_t)
    MergeFrom(*source);
  }
}

void server_info_t::MergeFrom(const server_info_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.server_info_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_type() != 0) {
    set_node_type(from.node_type());
  }
  if (from.server_type() != 0) {
    set_server_type(from.server_type());
  }
  if (from.server_index() != 0) {
    set_server_index(from.server_index());
  }
  if (from.zone_id() != 0) {
    set_zone_id(from.zone_id());
  }
}

void server_info_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.server_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server_info_t::CopyFrom(const server_info_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.server_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_info_t::IsInitialized() const {

  return true;
}

void server_info_t::Swap(server_info_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void server_info_t::InternalSwap(server_info_t* other) {
  std::swap(node_type_, other->node_type_);
  std::swap(server_type_, other->server_type_);
  std::swap(server_index_, other->server_index_);
  std::swap(zone_id_, other->zone_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata server_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = server_info_t_descriptor_;
  metadata.reflection = server_info_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// server_info_t

// optional int32 node_type = 1;
void server_info_t::clear_node_type() {
  node_type_ = 0;
}
 ::google::protobuf::int32 server_info_t::node_type() const {
  // @@protoc_insertion_point(field_get:protos.server_info_t.node_type)
  return node_type_;
}
 void server_info_t::set_node_type(::google::protobuf::int32 value) {
  
  node_type_ = value;
  // @@protoc_insertion_point(field_set:protos.server_info_t.node_type)
}

// optional int32 server_type = 2;
void server_info_t::clear_server_type() {
  server_type_ = 0;
}
 ::google::protobuf::int32 server_info_t::server_type() const {
  // @@protoc_insertion_point(field_get:protos.server_info_t.server_type)
  return server_type_;
}
 void server_info_t::set_server_type(::google::protobuf::int32 value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:protos.server_info_t.server_type)
}

// optional int32 server_index = 3;
void server_info_t::clear_server_index() {
  server_index_ = 0;
}
 ::google::protobuf::int32 server_info_t::server_index() const {
  // @@protoc_insertion_point(field_get:protos.server_info_t.server_index)
  return server_index_;
}
 void server_info_t::set_server_index(::google::protobuf::int32 value) {
  
  server_index_ = value;
  // @@protoc_insertion_point(field_set:protos.server_info_t.server_index)
}

// optional int32 zone_id = 4;
void server_info_t::clear_zone_id() {
  zone_id_ = 0;
}
 ::google::protobuf::int32 server_info_t::zone_id() const {
  // @@protoc_insertion_point(field_get:protos.server_info_t.zone_id)
  return zone_id_;
}
 void server_info_t::set_zone_id(::google::protobuf::int32 value) {
  
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:protos.server_info_t.zone_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_E_FRAME_MSG_REGISTER_SERVER_INFO::kServerNodeFieldNumber;
const int req_E_FRAME_MSG_REGISTER_SERVER_INFO::kZoneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_E_FRAME_MSG_REGISTER_SERVER_INFO::req_E_FRAME_MSG_REGISTER_SERVER_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
}

void req_E_FRAME_MSG_REGISTER_SERVER_INFO::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  server_node_ = const_cast< ::protos::server_info_t*>(&::protos::server_info_t::default_instance());
}

req_E_FRAME_MSG_REGISTER_SERVER_INFO::req_E_FRAME_MSG_REGISTER_SERVER_INFO(const req_E_FRAME_MSG_REGISTER_SERVER_INFO& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
}

void req_E_FRAME_MSG_REGISTER_SERVER_INFO::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  server_node_ = NULL;
  zone_id_ = 0;
}

req_E_FRAME_MSG_REGISTER_SERVER_INFO::~req_E_FRAME_MSG_REGISTER_SERVER_INFO() {
  // @@protoc_insertion_point(destructor:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  SharedDtor();
}

void req_E_FRAME_MSG_REGISTER_SERVER_INFO::SharedDtor() {
  if (this != default_instance_) {
    delete server_node_;
  }
}

void req_E_FRAME_MSG_REGISTER_SERVER_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_E_FRAME_MSG_REGISTER_SERVER_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_E_FRAME_MSG_REGISTER_SERVER_INFO_descriptor_;
}

const req_E_FRAME_MSG_REGISTER_SERVER_INFO& req_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protcl_5fframe_2eproto();
  return *default_instance_;
}

req_E_FRAME_MSG_REGISTER_SERVER_INFO* req_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance_ = NULL;

req_E_FRAME_MSG_REGISTER_SERVER_INFO* req_E_FRAME_MSG_REGISTER_SERVER_INFO::New(::google::protobuf::Arena* arena) const {
  req_E_FRAME_MSG_REGISTER_SERVER_INFO* n = new req_E_FRAME_MSG_REGISTER_SERVER_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_E_FRAME_MSG_REGISTER_SERVER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  if (GetArenaNoVirtual() == NULL && server_node_ != NULL) delete server_node_;
  server_node_ = NULL;
  zone_id_ = 0;
}

bool req_E_FRAME_MSG_REGISTER_SERVER_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protos.server_info_t server_node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zone_id;
        break;
      }

      // optional int32 zone_id = 2;
      case 2: {
        if (tag == 16) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zone_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  return false;
#undef DO_
}

void req_E_FRAME_MSG_REGISTER_SERVER_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  // optional .protos.server_info_t server_node = 1;
  if (this->has_server_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->server_node_, output);
  }

  // optional int32 zone_id = 2;
  if (this->zone_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zone_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
}

::google::protobuf::uint8* req_E_FRAME_MSG_REGISTER_SERVER_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  // optional .protos.server_info_t server_node = 1;
  if (this->has_server_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->server_node_, false, target);
  }

  // optional int32 zone_id = 2;
  if (this->zone_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zone_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  return target;
}

int req_E_FRAME_MSG_REGISTER_SERVER_INFO::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  int total_size = 0;

  // optional .protos.server_info_t server_node = 1;
  if (this->has_server_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_node_);
  }

  // optional int32 zone_id = 2;
  if (this->zone_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zone_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_E_FRAME_MSG_REGISTER_SERVER_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const req_E_FRAME_MSG_REGISTER_SERVER_INFO* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const req_E_FRAME_MSG_REGISTER_SERVER_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
    MergeFrom(*source);
  }
}

void req_E_FRAME_MSG_REGISTER_SERVER_INFO::MergeFrom(const req_E_FRAME_MSG_REGISTER_SERVER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_server_node()) {
    mutable_server_node()->::protos::server_info_t::MergeFrom(from.server_node());
  }
  if (from.zone_id() != 0) {
    set_zone_id(from.zone_id());
  }
}

void req_E_FRAME_MSG_REGISTER_SERVER_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_E_FRAME_MSG_REGISTER_SERVER_INFO::CopyFrom(const req_E_FRAME_MSG_REGISTER_SERVER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_E_FRAME_MSG_REGISTER_SERVER_INFO::IsInitialized() const {

  return true;
}

void req_E_FRAME_MSG_REGISTER_SERVER_INFO::Swap(req_E_FRAME_MSG_REGISTER_SERVER_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_E_FRAME_MSG_REGISTER_SERVER_INFO::InternalSwap(req_E_FRAME_MSG_REGISTER_SERVER_INFO* other) {
  std::swap(server_node_, other->server_node_);
  std::swap(zone_id_, other->zone_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_E_FRAME_MSG_REGISTER_SERVER_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = req_E_FRAME_MSG_REGISTER_SERVER_INFO_descriptor_;
  metadata.reflection = req_E_FRAME_MSG_REGISTER_SERVER_INFO_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_E_FRAME_MSG_REGISTER_SERVER_INFO

// optional .protos.server_info_t server_node = 1;
bool req_E_FRAME_MSG_REGISTER_SERVER_INFO::has_server_node() const {
  return !_is_default_instance_ && server_node_ != NULL;
}
void req_E_FRAME_MSG_REGISTER_SERVER_INFO::clear_server_node() {
  if (GetArenaNoVirtual() == NULL && server_node_ != NULL) delete server_node_;
  server_node_ = NULL;
}
const ::protos::server_info_t& req_E_FRAME_MSG_REGISTER_SERVER_INFO::server_node() const {
  // @@protoc_insertion_point(field_get:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO.server_node)
  return server_node_ != NULL ? *server_node_ : *default_instance_->server_node_;
}
::protos::server_info_t* req_E_FRAME_MSG_REGISTER_SERVER_INFO::mutable_server_node() {
  
  if (server_node_ == NULL) {
    server_node_ = new ::protos::server_info_t;
  }
  // @@protoc_insertion_point(field_mutable:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO.server_node)
  return server_node_;
}
::protos::server_info_t* req_E_FRAME_MSG_REGISTER_SERVER_INFO::release_server_node() {
  // @@protoc_insertion_point(field_release:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO.server_node)
  
  ::protos::server_info_t* temp = server_node_;
  server_node_ = NULL;
  return temp;
}
void req_E_FRAME_MSG_REGISTER_SERVER_INFO::set_allocated_server_node(::protos::server_info_t* server_node) {
  delete server_node_;
  server_node_ = server_node;
  if (server_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO.server_node)
}

// optional int32 zone_id = 2;
void req_E_FRAME_MSG_REGISTER_SERVER_INFO::clear_zone_id() {
  zone_id_ = 0;
}
 ::google::protobuf::int32 req_E_FRAME_MSG_REGISTER_SERVER_INFO::zone_id() const {
  // @@protoc_insertion_point(field_get:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO.zone_id)
  return zone_id_;
}
 void req_E_FRAME_MSG_REGISTER_SERVER_INFO::set_zone_id(::google::protobuf::int32 value) {
  
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:protos.req_E_FRAME_MSG_REGISTER_SERVER_INFO.zone_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rep_E_FRAME_MSG_REGISTER_SERVER_INFO::kIsokFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rep_E_FRAME_MSG_REGISTER_SERVER_INFO::rep_E_FRAME_MSG_REGISTER_SERVER_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
}

void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rep_E_FRAME_MSG_REGISTER_SERVER_INFO::rep_E_FRAME_MSG_REGISTER_SERVER_INFO(const rep_E_FRAME_MSG_REGISTER_SERVER_INFO& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
}

void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  isok_ = 0;
}

rep_E_FRAME_MSG_REGISTER_SERVER_INFO::~rep_E_FRAME_MSG_REGISTER_SERVER_INFO() {
  // @@protoc_insertion_point(destructor:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  SharedDtor();
}

void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rep_E_FRAME_MSG_REGISTER_SERVER_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rep_E_FRAME_MSG_REGISTER_SERVER_INFO_descriptor_;
}

const rep_E_FRAME_MSG_REGISTER_SERVER_INFO& rep_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protcl_5fframe_2eproto();
  return *default_instance_;
}

rep_E_FRAME_MSG_REGISTER_SERVER_INFO* rep_E_FRAME_MSG_REGISTER_SERVER_INFO::default_instance_ = NULL;

rep_E_FRAME_MSG_REGISTER_SERVER_INFO* rep_E_FRAME_MSG_REGISTER_SERVER_INFO::New(::google::protobuf::Arena* arena) const {
  rep_E_FRAME_MSG_REGISTER_SERVER_INFO* n = new rep_E_FRAME_MSG_REGISTER_SERVER_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  isok_ = 0;
}

bool rep_E_FRAME_MSG_REGISTER_SERVER_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  return false;
#undef DO_
}

void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  // optional int32 isok = 1;
  if (this->isok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isok(), output);
  }

  // @@protoc_insertion_point(serialize_end:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
}

::google::protobuf::uint8* rep_E_FRAME_MSG_REGISTER_SERVER_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  // optional int32 isok = 1;
  if (this->isok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isok(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  return target;
}

int rep_E_FRAME_MSG_REGISTER_SERVER_INFO::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  int total_size = 0;

  // optional int32 isok = 1;
  if (this->isok() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isok());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const rep_E_FRAME_MSG_REGISTER_SERVER_INFO* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rep_E_FRAME_MSG_REGISTER_SERVER_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
    MergeFrom(*source);
  }
}

void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::MergeFrom(const rep_E_FRAME_MSG_REGISTER_SERVER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.isok() != 0) {
    set_isok(from.isok());
  }
}

void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::CopyFrom(const rep_E_FRAME_MSG_REGISTER_SERVER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rep_E_FRAME_MSG_REGISTER_SERVER_INFO::IsInitialized() const {

  return true;
}

void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::Swap(rep_E_FRAME_MSG_REGISTER_SERVER_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::InternalSwap(rep_E_FRAME_MSG_REGISTER_SERVER_INFO* other) {
  std::swap(isok_, other->isok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rep_E_FRAME_MSG_REGISTER_SERVER_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rep_E_FRAME_MSG_REGISTER_SERVER_INFO_descriptor_;
  metadata.reflection = rep_E_FRAME_MSG_REGISTER_SERVER_INFO_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rep_E_FRAME_MSG_REGISTER_SERVER_INFO

// optional int32 isok = 1;
void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::clear_isok() {
  isok_ = 0;
}
 ::google::protobuf::int32 rep_E_FRAME_MSG_REGISTER_SERVER_INFO::isok() const {
  // @@protoc_insertion_point(field_get:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO.isok)
  return isok_;
}
 void rep_E_FRAME_MSG_REGISTER_SERVER_INFO::set_isok(::google::protobuf::int32 value) {
  
  isok_ = value;
  // @@protoc_insertion_point(field_set:protos.rep_E_FRAME_MSG_REGISTER_SERVER_INFO.isok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_E_FRAME_MSG_NEW_SERVER_BOOTUP::kNodeTypeFieldNumber;
const int req_E_FRAME_MSG_NEW_SERVER_BOOTUP::kServerTypeFieldNumber;
const int req_E_FRAME_MSG_NEW_SERVER_BOOTUP::kNodeIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_E_FRAME_MSG_NEW_SERVER_BOOTUP::req_E_FRAME_MSG_NEW_SERVER_BOOTUP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
}

void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

req_E_FRAME_MSG_NEW_SERVER_BOOTUP::req_E_FRAME_MSG_NEW_SERVER_BOOTUP(const req_E_FRAME_MSG_NEW_SERVER_BOOTUP& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
}

void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_type_ = 0;
  server_type_ = 0;
  node_index_ = 0;
}

req_E_FRAME_MSG_NEW_SERVER_BOOTUP::~req_E_FRAME_MSG_NEW_SERVER_BOOTUP() {
  // @@protoc_insertion_point(destructor:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  SharedDtor();
}

void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_E_FRAME_MSG_NEW_SERVER_BOOTUP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_E_FRAME_MSG_NEW_SERVER_BOOTUP_descriptor_;
}

const req_E_FRAME_MSG_NEW_SERVER_BOOTUP& req_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protcl_5fframe_2eproto();
  return *default_instance_;
}

req_E_FRAME_MSG_NEW_SERVER_BOOTUP* req_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance_ = NULL;

req_E_FRAME_MSG_NEW_SERVER_BOOTUP* req_E_FRAME_MSG_NEW_SERVER_BOOTUP::New(::google::protobuf::Arena* arena) const {
  req_E_FRAME_MSG_NEW_SERVER_BOOTUP* n = new req_E_FRAME_MSG_NEW_SERVER_BOOTUP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(req_E_FRAME_MSG_NEW_SERVER_BOOTUP, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<req_E_FRAME_MSG_NEW_SERVER_BOOTUP*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_type_, node_index_);

#undef ZR_HELPER_
#undef ZR_

}

bool req_E_FRAME_MSG_NEW_SERVER_BOOTUP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_type;
        break;
      }

      // optional int32 server_type = 2;
      case 2: {
        if (tag == 16) {
         parse_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_node_index;
        break;
      }

      // optional int32 node_index = 3;
      case 3: {
        if (tag == 24) {
         parse_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  return false;
#undef DO_
}

void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  // optional int32 node_type = 1;
  if (this->node_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_type(), output);
  }

  // optional int32 server_type = 2;
  if (this->server_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_type(), output);
  }

  // optional int32 node_index = 3;
  if (this->node_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->node_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
}

::google::protobuf::uint8* req_E_FRAME_MSG_NEW_SERVER_BOOTUP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  // optional int32 node_type = 1;
  if (this->node_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_type(), target);
  }

  // optional int32 server_type = 2;
  if (this->server_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_type(), target);
  }

  // optional int32 node_index = 3;
  if (this->node_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->node_index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  return target;
}

int req_E_FRAME_MSG_NEW_SERVER_BOOTUP::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  int total_size = 0;

  // optional int32 node_type = 1;
  if (this->node_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_type());
  }

  // optional int32 server_type = 2;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_type());
  }

  // optional int32 node_index = 3;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_index());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const req_E_FRAME_MSG_NEW_SERVER_BOOTUP* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const req_E_FRAME_MSG_NEW_SERVER_BOOTUP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
    MergeFrom(*source);
  }
}

void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::MergeFrom(const req_E_FRAME_MSG_NEW_SERVER_BOOTUP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_type() != 0) {
    set_node_type(from.node_type());
  }
  if (from.server_type() != 0) {
    set_server_type(from.server_type());
  }
  if (from.node_index() != 0) {
    set_node_index(from.node_index());
  }
}

void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::CopyFrom(const req_E_FRAME_MSG_NEW_SERVER_BOOTUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_E_FRAME_MSG_NEW_SERVER_BOOTUP::IsInitialized() const {

  return true;
}

void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::Swap(req_E_FRAME_MSG_NEW_SERVER_BOOTUP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::InternalSwap(req_E_FRAME_MSG_NEW_SERVER_BOOTUP* other) {
  std::swap(node_type_, other->node_type_);
  std::swap(server_type_, other->server_type_);
  std::swap(node_index_, other->node_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_E_FRAME_MSG_NEW_SERVER_BOOTUP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = req_E_FRAME_MSG_NEW_SERVER_BOOTUP_descriptor_;
  metadata.reflection = req_E_FRAME_MSG_NEW_SERVER_BOOTUP_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_E_FRAME_MSG_NEW_SERVER_BOOTUP

// optional int32 node_type = 1;
void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::clear_node_type() {
  node_type_ = 0;
}
 ::google::protobuf::int32 req_E_FRAME_MSG_NEW_SERVER_BOOTUP::node_type() const {
  // @@protoc_insertion_point(field_get:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP.node_type)
  return node_type_;
}
 void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::set_node_type(::google::protobuf::int32 value) {
  
  node_type_ = value;
  // @@protoc_insertion_point(field_set:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP.node_type)
}

// optional int32 server_type = 2;
void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::clear_server_type() {
  server_type_ = 0;
}
 ::google::protobuf::int32 req_E_FRAME_MSG_NEW_SERVER_BOOTUP::server_type() const {
  // @@protoc_insertion_point(field_get:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP.server_type)
  return server_type_;
}
 void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::set_server_type(::google::protobuf::int32 value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP.server_type)
}

// optional int32 node_index = 3;
void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::clear_node_index() {
  node_index_ = 0;
}
 ::google::protobuf::int32 req_E_FRAME_MSG_NEW_SERVER_BOOTUP::node_index() const {
  // @@protoc_insertion_point(field_get:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP.node_index)
  return node_index_;
}
 void req_E_FRAME_MSG_NEW_SERVER_BOOTUP::set_node_index(::google::protobuf::int32 value) {
  
  node_index_ = value;
  // @@protoc_insertion_point(field_set:protos.req_E_FRAME_MSG_NEW_SERVER_BOOTUP.node_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::kIsokFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::rep_E_FRAME_MSG_NEW_SERVER_BOOTUP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
}

void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::rep_E_FRAME_MSG_NEW_SERVER_BOOTUP(const rep_E_FRAME_MSG_NEW_SERVER_BOOTUP& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
}

void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  isok_ = 0;
}

rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::~rep_E_FRAME_MSG_NEW_SERVER_BOOTUP() {
  // @@protoc_insertion_point(destructor:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  SharedDtor();
}

void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rep_E_FRAME_MSG_NEW_SERVER_BOOTUP_descriptor_;
}

const rep_E_FRAME_MSG_NEW_SERVER_BOOTUP& rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protcl_5fframe_2eproto();
  return *default_instance_;
}

rep_E_FRAME_MSG_NEW_SERVER_BOOTUP* rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::default_instance_ = NULL;

rep_E_FRAME_MSG_NEW_SERVER_BOOTUP* rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::New(::google::protobuf::Arena* arena) const {
  rep_E_FRAME_MSG_NEW_SERVER_BOOTUP* n = new rep_E_FRAME_MSG_NEW_SERVER_BOOTUP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  isok_ = 0;
}

bool rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  return false;
#undef DO_
}

void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  // optional int32 isok = 1;
  if (this->isok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isok(), output);
  }

  // @@protoc_insertion_point(serialize_end:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
}

::google::protobuf::uint8* rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  // optional int32 isok = 1;
  if (this->isok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isok(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  return target;
}

int rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  int total_size = 0;

  // optional int32 isok = 1;
  if (this->isok() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isok());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const rep_E_FRAME_MSG_NEW_SERVER_BOOTUP* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rep_E_FRAME_MSG_NEW_SERVER_BOOTUP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
    MergeFrom(*source);
  }
}

void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::MergeFrom(const rep_E_FRAME_MSG_NEW_SERVER_BOOTUP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.isok() != 0) {
    set_isok(from.isok());
  }
}

void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::CopyFrom(const rep_E_FRAME_MSG_NEW_SERVER_BOOTUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::IsInitialized() const {

  return true;
}

void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::Swap(rep_E_FRAME_MSG_NEW_SERVER_BOOTUP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::InternalSwap(rep_E_FRAME_MSG_NEW_SERVER_BOOTUP* other) {
  std::swap(isok_, other->isok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rep_E_FRAME_MSG_NEW_SERVER_BOOTUP_descriptor_;
  metadata.reflection = rep_E_FRAME_MSG_NEW_SERVER_BOOTUP_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rep_E_FRAME_MSG_NEW_SERVER_BOOTUP

// optional int32 isok = 1;
void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::clear_isok() {
  isok_ = 0;
}
 ::google::protobuf::int32 rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::isok() const {
  // @@protoc_insertion_point(field_get:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP.isok)
  return isok_;
}
 void rep_E_FRAME_MSG_NEW_SERVER_BOOTUP::set_isok(::google::protobuf::int32 value) {
  
  isok_ = value;
  // @@protoc_insertion_point(field_set:protos.rep_E_FRAME_MSG_NEW_SERVER_BOOTUP.isok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::kNodeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
}

void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST(const req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
}

void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_type_ = 0;
}

req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::~req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST() {
  // @@protoc_insertion_point(destructor:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  SharedDtor();
}

void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_descriptor_;
}

const req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST& req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protcl_5fframe_2eproto();
  return *default_instance_;
}

req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST* req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance_ = NULL;

req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST* req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::New(::google::protobuf::Arena* arena) const {
  req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST* n = new req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  node_type_ = 0;
}

bool req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  return false;
#undef DO_
}

void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  // optional int32 node_type = 1;
  if (this->node_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
}

::google::protobuf::uint8* req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  // optional int32 node_type = 1;
  if (this->node_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  return target;
}

int req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  int total_size = 0;

  // optional int32 node_type = 1;
  if (this->node_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
    MergeFrom(*source);
  }
}

void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::MergeFrom(const req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_type() != 0) {
    set_node_type(from.node_type());
  }
}

void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::CopyFrom(const req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::IsInitialized() const {

  return true;
}

void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::Swap(req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::InternalSwap(req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST* other) {
  std::swap(node_type_, other->node_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_descriptor_;
  metadata.reflection = req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST

// optional int32 node_type = 1;
void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::clear_node_type() {
  node_type_ = 0;
}
 ::google::protobuf::int32 req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::node_type() const {
  // @@protoc_insertion_point(field_get:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST.node_type)
  return node_type_;
}
 void req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::set_node_type(::google::protobuf::int32 value) {
  
  node_type_ = value;
  // @@protoc_insertion_point(field_set:protos.req_E_FRAME_MSG_QUERY_SERVER_NODE_LIST.node_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::kIsokFieldNumber;
const int rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::kServerListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
}

void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST(const rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
}

void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  isok_ = 0;
}

rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::~rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST() {
  // @@protoc_insertion_point(destructor:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  SharedDtor();
}

void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_descriptor_;
}

const rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST& rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protcl_5fframe_2eproto();
  return *default_instance_;
}

rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST* rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::default_instance_ = NULL;

rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST* rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::New(::google::protobuf::Arena* arena) const {
  rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST* n = new rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  isok_ = 0;
  server_list_.Clear();
}

bool rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_list;
        break;
      }

      // repeated .protos.server_info_t server_list = 2;
      case 2: {
        if (tag == 18) {
         parse_server_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_server_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_server_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_server_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  return false;
#undef DO_
}

void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  // optional int32 isok = 1;
  if (this->isok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isok(), output);
  }

  // repeated .protos.server_info_t server_list = 2;
  for (unsigned int i = 0, n = this->server_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
}

::google::protobuf::uint8* rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  // optional int32 isok = 1;
  if (this->isok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isok(), target);
  }

  // repeated .protos.server_info_t server_list = 2;
  for (unsigned int i = 0, n = this->server_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->server_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  return target;
}

int rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  int total_size = 0;

  // optional int32 isok = 1;
  if (this->isok() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isok());
  }

  // repeated .protos.server_info_t server_list = 2;
  total_size += 1 * this->server_list_size();
  for (int i = 0; i < this->server_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
    MergeFrom(*source);
  }
}

void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::MergeFrom(const rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  server_list_.MergeFrom(from.server_list_);
  if (from.isok() != 0) {
    set_isok(from.isok());
  }
}

void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::CopyFrom(const rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::IsInitialized() const {

  return true;
}

void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::Swap(rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::InternalSwap(rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST* other) {
  std::swap(isok_, other->isok_);
  server_list_.UnsafeArenaSwap(&other->server_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_descriptor_;
  metadata.reflection = rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST

// optional int32 isok = 1;
void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::clear_isok() {
  isok_ = 0;
}
 ::google::protobuf::int32 rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::isok() const {
  // @@protoc_insertion_point(field_get:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST.isok)
  return isok_;
}
 void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::set_isok(::google::protobuf::int32 value) {
  
  isok_ = value;
  // @@protoc_insertion_point(field_set:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST.isok)
}

// repeated .protos.server_info_t server_list = 2;
int rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::server_list_size() const {
  return server_list_.size();
}
void rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::clear_server_list() {
  server_list_.Clear();
}
const ::protos::server_info_t& rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::server_list(int index) const {
  // @@protoc_insertion_point(field_get:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST.server_list)
  return server_list_.Get(index);
}
::protos::server_info_t* rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST.server_list)
  return server_list_.Mutable(index);
}
::protos::server_info_t* rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::add_server_list() {
  // @@protoc_insertion_point(field_add:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST.server_list)
  return server_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::protos::server_info_t >*
rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST.server_list)
  return &server_list_;
}
const ::google::protobuf::RepeatedPtrField< ::protos::server_info_t >&
rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST::server_list() const {
  // @@protoc_insertion_point(field_list:protos.rep_E_FRAME_MSG_QUERY_SERVER_NODE_LIST.server_list)
  return server_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::req_E_FRAME_MSG_ROOT_TO_XS_START_RUN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
}

void req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::req_E_FRAME_MSG_ROOT_TO_XS_START_RUN(const req_E_FRAME_MSG_ROOT_TO_XS_START_RUN& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
}

void req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::~req_E_FRAME_MSG_ROOT_TO_XS_START_RUN() {
  // @@protoc_insertion_point(destructor:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  SharedDtor();
}

void req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_E_FRAME_MSG_ROOT_TO_XS_START_RUN_descriptor_;
}

const req_E_FRAME_MSG_ROOT_TO_XS_START_RUN& req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protcl_5fframe_2eproto();
  return *default_instance_;
}

req_E_FRAME_MSG_ROOT_TO_XS_START_RUN* req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance_ = NULL;

req_E_FRAME_MSG_ROOT_TO_XS_START_RUN* req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::New(::google::protobuf::Arena* arena) const {
  req_E_FRAME_MSG_ROOT_TO_XS_START_RUN* n = new req_E_FRAME_MSG_ROOT_TO_XS_START_RUN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
}

bool req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  return false;
#undef DO_
}

void req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  // @@protoc_insertion_point(serialize_end:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
}

::google::protobuf::uint8* req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  // @@protoc_insertion_point(serialize_to_array_end:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  return target;
}

int req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const req_E_FRAME_MSG_ROOT_TO_XS_START_RUN* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const req_E_FRAME_MSG_ROOT_TO_XS_START_RUN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
    MergeFrom(*source);
  }
}

void req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::MergeFrom(const req_E_FRAME_MSG_ROOT_TO_XS_START_RUN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::CopyFrom(const req_E_FRAME_MSG_ROOT_TO_XS_START_RUN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.req_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::IsInitialized() const {

  return true;
}

void req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::Swap(req_E_FRAME_MSG_ROOT_TO_XS_START_RUN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::InternalSwap(req_E_FRAME_MSG_ROOT_TO_XS_START_RUN* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_E_FRAME_MSG_ROOT_TO_XS_START_RUN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = req_E_FRAME_MSG_ROOT_TO_XS_START_RUN_descriptor_;
  metadata.reflection = req_E_FRAME_MSG_ROOT_TO_XS_START_RUN_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_E_FRAME_MSG_ROOT_TO_XS_START_RUN

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::kIsokFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
}

void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN(const rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
}

void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  isok_ = 0;
}

rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::~rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN() {
  // @@protoc_insertion_point(destructor:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  SharedDtor();
}

void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN_descriptor_;
}

const rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN& rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protcl_5fframe_2eproto();
  return *default_instance_;
}

rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN* rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::default_instance_ = NULL;

rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN* rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::New(::google::protobuf::Arena* arena) const {
  rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN* n = new rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  isok_ = 0;
}

bool rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  return false;
#undef DO_
}

void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  // optional int32 isok = 1;
  if (this->isok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isok(), output);
  }

  // @@protoc_insertion_point(serialize_end:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
}

::google::protobuf::uint8* rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  // optional int32 isok = 1;
  if (this->isok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isok(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  return target;
}

int rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  int total_size = 0;

  // optional int32 isok = 1;
  if (this->isok() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isok());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
    MergeFrom(*source);
  }
}

void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::MergeFrom(const rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.isok() != 0) {
    set_isok(from.isok());
  }
}

void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::CopyFrom(const rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::IsInitialized() const {

  return true;
}

void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::Swap(rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::InternalSwap(rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN* other) {
  std::swap(isok_, other->isok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN_descriptor_;
  metadata.reflection = rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN

// optional int32 isok = 1;
void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::clear_isok() {
  isok_ = 0;
}
 ::google::protobuf::int32 rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::isok() const {
  // @@protoc_insertion_point(field_get:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN.isok)
  return isok_;
}
 void rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN::set_isok(::google::protobuf::int32 value) {
  
  isok_ = value;
  // @@protoc_insertion_point(field_set:protos.rep_E_FRAME_MSG_ROOT_TO_XS_START_RUN.isok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::kNodeTypeFieldNumber;
const int req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::kNodeIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
}

void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS(const req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
}

void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_type_ = 0;
  node_index_ = 0;
}

req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::~req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS() {
  // @@protoc_insertion_point(destructor:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  SharedDtor();
}

void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_descriptor_;
}

const req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS& req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protcl_5fframe_2eproto();
  return *default_instance_;
}

req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS* req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance_ = NULL;

req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS* req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::New(::google::protobuf::Arena* arena) const {
  req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS* n = new req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_type_, node_index_);

#undef ZR_HELPER_
#undef ZR_

}

bool req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_index;
        break;
      }

      // optional int32 node_index = 2;
      case 2: {
        if (tag == 16) {
         parse_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  return false;
#undef DO_
}

void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  // optional int32 node_type = 1;
  if (this->node_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_type(), output);
  }

  // optional int32 node_index = 2;
  if (this->node_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
}

::google::protobuf::uint8* req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  // optional int32 node_type = 1;
  if (this->node_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_type(), target);
  }

  // optional int32 node_index = 2;
  if (this->node_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  return target;
}

int req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  int total_size = 0;

  // optional int32 node_type = 1;
  if (this->node_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_type());
  }

  // optional int32 node_index = 2;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_index());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
    MergeFrom(*source);
  }
}

void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::MergeFrom(const req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_type() != 0) {
    set_node_type(from.node_type());
  }
  if (from.node_index() != 0) {
    set_node_index(from.node_index());
  }
}

void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::CopyFrom(const req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::IsInitialized() const {

  return true;
}

void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::Swap(req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::InternalSwap(req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS* other) {
  std::swap(node_type_, other->node_type_);
  std::swap(node_index_, other->node_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_descriptor_;
  metadata.reflection = req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS

// optional int32 node_type = 1;
void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::clear_node_type() {
  node_type_ = 0;
}
 ::google::protobuf::int32 req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::node_type() const {
  // @@protoc_insertion_point(field_get:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS.node_type)
  return node_type_;
}
 void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::set_node_type(::google::protobuf::int32 value) {
  
  node_type_ = value;
  // @@protoc_insertion_point(field_set:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS.node_type)
}

// optional int32 node_index = 2;
void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::clear_node_index() {
  node_index_ = 0;
}
 ::google::protobuf::int32 req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::node_index() const {
  // @@protoc_insertion_point(field_get:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS.node_index)
  return node_index_;
}
 void req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::set_node_index(::google::protobuf::int32 value) {
  
  node_index_ = value;
  // @@protoc_insertion_point(field_set:protos.req_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS.node_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::kIsokFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
}

void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS(const rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
}

void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  isok_ = 0;
}

rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::~rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS() {
  // @@protoc_insertion_point(destructor:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  SharedDtor();
}

void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_descriptor_;
}

const rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS& rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protcl_5fframe_2eproto();
  return *default_instance_;
}

rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS* rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::default_instance_ = NULL;

rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS* rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::New(::google::protobuf::Arena* arena) const {
  rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS* n = new rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  isok_ = 0;
}

bool rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  return false;
#undef DO_
}

void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  // optional int32 isok = 1;
  if (this->isok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isok(), output);
  }

  // @@protoc_insertion_point(serialize_end:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
}

::google::protobuf::uint8* rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  // optional int32 isok = 1;
  if (this->isok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isok(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  return target;
}

int rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  int total_size = 0;

  // optional int32 isok = 1;
  if (this->isok() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isok());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
    MergeFrom(*source);
  }
}

void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::MergeFrom(const rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.isok() != 0) {
    set_isok(from.isok());
  }
}

void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::CopyFrom(const rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::IsInitialized() const {

  return true;
}

void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::Swap(rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::InternalSwap(rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS* other) {
  std::swap(isok_, other->isok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_descriptor_;
  metadata.reflection = rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS

// optional int32 isok = 1;
void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::clear_isok() {
  isok_ = 0;
}
 ::google::protobuf::int32 rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::isok() const {
  // @@protoc_insertion_point(field_get:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS.isok)
  return isok_;
}
 void rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS::set_isok(::google::protobuf::int32 value) {
  
  isok_ = value;
  // @@protoc_insertion_point(field_set:protos.rep_E_FRAME_MSG_XS_TO_ROOT_WAIT_OTHERS.isok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)

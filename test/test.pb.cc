// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tprotos {

namespace {

const ::google::protobuf::Descriptor* user_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_containers_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_containers_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_containers_t_UsersEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  user_info_t_descriptor_ = file->message_type(0);
  static const int user_info_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_t, uid_),
  };
  user_info_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      user_info_t_descriptor_,
      user_info_t::default_instance_,
      user_info_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(user_info_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_t, _is_default_instance_));
  user_containers_t_descriptor_ = file->message_type(1);
  static const int user_containers_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_containers_t, users_),
  };
  user_containers_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      user_containers_t_descriptor_,
      user_containers_t::default_instance_,
      user_containers_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(user_containers_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_containers_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_containers_t, _is_default_instance_));
  user_containers_t_UsersEntry_descriptor_ = user_containers_t_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      user_info_t_descriptor_, &user_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      user_containers_t_descriptor_, &user_containers_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        user_containers_t_UsersEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::tprotos::user_info_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                user_containers_t_UsersEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete user_info_t::default_instance_;
  delete user_info_t_reflection_;
  delete user_containers_t::default_instance_;
  delete user_containers_t_reflection_;
}

void protobuf_AddDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\022\007tprotos\"4\n\013user_info_t\022\n\n\002"
    "id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\013\n\003uid\030\003 \001(\003\"\215\001\n\021"
    "user_containers_t\0224\n\005users\030\001 \003(\0132%.tprot"
    "os.user_containers_t.UsersEntry\032B\n\nUsers"
    "Entry\022\013\n\003key\030\001 \001(\003\022#\n\005value\030\002 \001(\0132\024.tpro"
    "tos.user_info_t:\0028\001b\006proto3", 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  user_info_t::default_instance_ = new user_info_t();
  user_containers_t::default_instance_ = new user_containers_t();
  user_info_t::default_instance_->InitAsDefaultInstance();
  user_containers_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_info_t::kIdFieldNumber;
const int user_info_t::kNameFieldNumber;
const int user_info_t::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_info_t::user_info_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tprotos.user_info_t)
}

void user_info_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

user_info_t::user_info_t(const user_info_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tprotos.user_info_t)
}

void user_info_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_LONGLONG(0);
}

user_info_t::~user_info_t() {
  // @@protoc_insertion_point(destructor:tprotos.user_info_t)
  SharedDtor();
}

void user_info_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void user_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_info_t_descriptor_;
}

const user_info_t& user_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

user_info_t* user_info_t::default_instance_ = NULL;

user_info_t* user_info_t::New(::google::protobuf::Arena* arena) const {
  user_info_t* n = new user_info_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_info_t::Clear() {
// @@protoc_insertion_point(message_clear_start:tprotos.user_info_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(user_info_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<user_info_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, id_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool user_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tprotos.user_info_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tprotos.user_info_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional int64 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tprotos.user_info_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tprotos.user_info_t)
  return false;
#undef DO_
}

void user_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tprotos.user_info_t)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tprotos.user_info_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int64 uid = 3;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:tprotos.user_info_t)
}

::google::protobuf::uint8* user_info_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tprotos.user_info_t)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tprotos.user_info_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int64 uid = 3;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tprotos.user_info_t)
  return target;
}

int user_info_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tprotos.user_info_t)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int64 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tprotos.user_info_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const user_info_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const user_info_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tprotos.user_info_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tprotos.user_info_t)
    MergeFrom(*source);
  }
}

void user_info_t::MergeFrom(const user_info_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tprotos.user_info_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void user_info_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tprotos.user_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info_t::CopyFrom(const user_info_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tprotos.user_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info_t::IsInitialized() const {

  return true;
}

void user_info_t::Swap(user_info_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_info_t::InternalSwap(user_info_t* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_info_t_descriptor_;
  metadata.reflection = user_info_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_info_t

// optional int32 id = 1;
void user_info_t::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 user_info_t::id() const {
  // @@protoc_insertion_point(field_get:tprotos.user_info_t.id)
  return id_;
}
 void user_info_t::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tprotos.user_info_t.id)
}

// optional string name = 2;
void user_info_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& user_info_t::name() const {
  // @@protoc_insertion_point(field_get:tprotos.user_info_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_info_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tprotos.user_info_t.name)
}
 void user_info_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tprotos.user_info_t.name)
}
 void user_info_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tprotos.user_info_t.name)
}
 ::std::string* user_info_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tprotos.user_info_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* user_info_t::release_name() {
  // @@protoc_insertion_point(field_release:tprotos.user_info_t.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_info_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tprotos.user_info_t.name)
}

// optional int64 uid = 3;
void user_info_t::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 user_info_t::uid() const {
  // @@protoc_insertion_point(field_get:tprotos.user_info_t.uid)
  return uid_;
}
 void user_info_t::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:tprotos.user_info_t.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_containers_t::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_containers_t::user_containers_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tprotos.user_containers_t)
}

void user_containers_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

user_containers_t::user_containers_t(const user_containers_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tprotos.user_containers_t)
}

void user_containers_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  users_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  users_.SetEntryDescriptor(
      &::tprotos::user_containers_t_UsersEntry_descriptor_);
}

user_containers_t::~user_containers_t() {
  // @@protoc_insertion_point(destructor:tprotos.user_containers_t)
  SharedDtor();
}

void user_containers_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_containers_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_containers_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_containers_t_descriptor_;
}

const user_containers_t& user_containers_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

user_containers_t* user_containers_t::default_instance_ = NULL;

user_containers_t* user_containers_t::New(::google::protobuf::Arena* arena) const {
  user_containers_t* n = new user_containers_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_containers_t::Clear() {
// @@protoc_insertion_point(message_clear_start:tprotos.user_containers_t)
  users_.Clear();
}

bool user_containers_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tprotos.user_containers_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int64, .tprotos.user_info_t> users = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          user_containers_t_UsersEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::tprotos::user_info_t,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::tprotos::user_info_t > > parser(&users_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tprotos.user_containers_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tprotos.user_containers_t)
  return false;
#undef DO_
}

void user_containers_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tprotos.user_containers_t)
  // map<int64, .tprotos.user_info_t> users = 1;
  if (!this->users().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tprotos::user_info_t >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->users().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->users().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tprotos::user_info_t >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tprotos::user_info_t >::const_iterator
          it = this->users().begin();
          it != this->users().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<user_containers_t_UsersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(users_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<user_containers_t_UsersEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tprotos::user_info_t >::const_iterator
          it = this->users().begin();
          it != this->users().end(); ++it) {
        entry.reset(users_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tprotos.user_containers_t)
}

::google::protobuf::uint8* user_containers_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tprotos.user_containers_t)
  // map<int64, .tprotos.user_info_t> users = 1;
  if (!this->users().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tprotos::user_info_t >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->users().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->users().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tprotos::user_info_t >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tprotos::user_info_t >::const_iterator
          it = this->users().begin();
          it != this->users().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<user_containers_t_UsersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(users_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<user_containers_t_UsersEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tprotos::user_info_t >::const_iterator
          it = this->users().begin();
          it != this->users().end(); ++it) {
        entry.reset(users_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tprotos.user_containers_t)
  return target;
}

int user_containers_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tprotos.user_containers_t)
  int total_size = 0;

  // map<int64, .tprotos.user_info_t> users = 1;
  total_size += 1 * this->users_size();
  {
    ::google::protobuf::scoped_ptr<user_containers_t_UsersEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::tprotos::user_info_t >::const_iterator
        it = this->users().begin();
        it != this->users().end(); ++it) {
      entry.reset(users_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_containers_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tprotos.user_containers_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const user_containers_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const user_containers_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tprotos.user_containers_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tprotos.user_containers_t)
    MergeFrom(*source);
  }
}

void user_containers_t::MergeFrom(const user_containers_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tprotos.user_containers_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  users_.MergeFrom(from.users_);
}

void user_containers_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tprotos.user_containers_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_containers_t::CopyFrom(const user_containers_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tprotos.user_containers_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_containers_t::IsInitialized() const {

  return true;
}

void user_containers_t::Swap(user_containers_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_containers_t::InternalSwap(user_containers_t* other) {
  users_.Swap(&other->users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_containers_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_containers_t_descriptor_;
  metadata.reflection = user_containers_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_containers_t

// map<int64, .tprotos.user_info_t> users = 1;
int user_containers_t::users_size() const {
  return users_.size();
}
void user_containers_t::clear_users() {
  users_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::tprotos::user_info_t >&
user_containers_t::users() const {
  // @@protoc_insertion_point(field_map:tprotos.user_containers_t.users)
  return users_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::tprotos::user_info_t >*
user_containers_t::mutable_users() {
  // @@protoc_insertion_point(field_mutable_map:tprotos.user_containers_t.users)
  return users_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tprotos

// @@protoc_insertion_point(global_scope)
